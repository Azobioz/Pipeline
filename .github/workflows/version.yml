name: Update version

on:
  pull_request:
    branches:
      - master

jobs:
  update-version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Получаем полную историю комитов для анализа

      - name: Set up python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: What type of update
        id: update-type
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          if [[ "$PR_TITLE" =~ "feature" ]]; then
            echo "type=minor" >> $GITHUB_OUTPUT
          elif [[ "$PR_TITLE" =~ "hotfix" ]]; then
            echo "type=patch" >> $GITHUB_OUTPUT
          else
            echo "Ошибка: В заголовке PR отсутствует 'feature' или 'hotfix'. Укажите тип обновления в заголовке PR."
            exit 1  
          fi

      - name: Сохранение старой версии
        id: old-version
        run: |
          OLD_VERSION=$(cat version)
          echo "old_version=$OLD_VERSION" >> $GITHUB_OUTPUT
      
      - name: Update version
        run: |
          echo "${{ steps.update-type.outputs.type }}" | python version_up.py

      - name: Get new version and temporary 
        id: new-version
        run: |
          NEW_VERSION=$(cat version)
          TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S.%6N')
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT

      - name: Commit of version changes
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          git checkout ${{ github.head_ref }}
          git add version version_log
          git commit -m "[${{ steps.new-version.outputs.new_version }}] <-- [${{ steps.old-version.outputs.old_version }}] [${{ steps.new-version.outputs.timestamp }}] ${{ steps.update-type.outputs.type }} up"
          git push origin ${{ github.head_ref }}

      - name: Creating label with new version
        uses: actions/github-script@v6
        with:
          script: |
            const newVersion = "${{ steps.new-version.outputs.new_version }}";
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              labels: [`${newVersion}`]
            });

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: maxmakarov/Pipeline
          tags: |
            type=raw,value=v${{ steps.new-version.outputs.new_version }},enable=${{ success }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Update Docker Hub description
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
          repository: maxmakarov/Pipeline
          readme-filepath: README.md

      - name: Add dockerhub label to PR
        uses: actions/github-script@v6
        with:
          script: |
            try {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                labels: ['dockerhub']
              })
            } catch (error) {
              console.log('Error adding label:', error)
            }
